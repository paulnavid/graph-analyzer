#
# Internationalization properties --- GERMAN/DEUTSCH
#
# If new key/value pairs get added to this property file they have to be added to all other messages_xxx.properties to.
# Otherwise errors will occur at runtime!
#
# The key format should be understandable and be related to where they belong.
#
# e.g. if a DFS algorithm gets added the key should start with algorithm.dfs.<YOUR-SPECIFIC_KEY>
#
#

general.application.title = Graph Analyzer


# Menubar properties
menu.file               = File
menu.file.abort         = Abort
menu.file.new           = New graph
menu.file.open          = Open file...
menu.file.quit          = Quit
menu.file.save          = Save
menu.file.settings      = Settings
menu.help               = Help
menu.help.about         = About Graph Analyzer
menu.help.showTutorial  = Show tutorial on startup
menu.settings           = Settings
menu.settings.languages = Languages


# Welcome panel properties
welcomePanel.text = <html><body><div align="center"><h1>Welcome. This is <font color =#000000>Graph Analyzer</font>.</h1><br>Graph Analyzer is an application that gives you the opportunity to see visually how strongly connected components can be computed in linear time!<br><br>Just click on <b>File>New graph</b> in the menu to open an example graph.<br>Otherwise you could just hit [<b>Ctrl + N</b>] on Windows or [<b>&#8984; + N</b>] on macOS on your keyboard.</div></body></html>


# DescriptionPanel properties
descriptionpanel.label.choose = Choose algorithm:
empty = ---


# ControlPanel properties
controls.button.prev = << Step back
controls.button.next = Step forward >>
controls.button.starttutorial = Start tutorial
controls.button.tooltip.starttutorial = Start tutorial routine


# Dialog properties
newgraphdialog.title = Choose a graph
newgraphdialog.button.directedgraph = New Directed Graph

settingsdialog.title = Settings
settingsdialog.label.chooselanguage = Choose language:
settingsdialog.checkbox.showtutorial = Show tutorial on startup
settingsdialog.button.apply = Apply and Close
settingsdialog.button.close = Close

aboutdialog.title = About Graph Analyzer
aboutdialog.content = <div align="center"><h1>Graph Analyzer</h1><br><br>Version 0.0.1<br><br>Source Code by Paul Ehler</div>


# Algorithm properties
algorithm.scc.name = Strongly connected components

algorithm.scc.introduction.title = Introduction: Strongly connected Components
algorithm.scc.introduction.content = This tutorial will show you how <b>strongly connected components</b> of a directed graph can be computed in <b>linear time</b>. \
A strongly connected component is a subgraph of a given directed graph that is strongly connected and can not be extended to a bigger strongly connected component. \
A subgraph is strongly connected if there is a directed path from any vertex <i>u</i> to a vertex <i>v</> and vice versa. In simple words a strongly connected component is a loop inside a graph. \
The algorithm shown in this tutorial goes back to the mathematicians Sambasiva Rao Kosaraju and Micha Sharir. \
The three main parts of the algorithm are: \
<br><br><b>1)</b> A depth first search to determine the nodes finishing times \
<br><b>2)</b> Transposition of the graph \
<br><b>3)</b> A depth first search in reverse order of the finishing times from step 1) \
<br><br>The algorithm makes use of the circumstance that a strongly connected component of a graph <i>G</i> is simultaneously a strongly connected component of its transposed graph <i>G<sup>T</sup></i>. \
<br><br><i>Hint: To start the tutorial just click on the <b>Start tutorial</b> button below. After that you can step forwards and backwords by clicking the <b>Next step</b> and <b>Previous step</b> buttons.
 
algorithm.scc.firstdfs.title = Step 1: First Depth First Search (DFS)
algorithm.scc.firstdfs.content = The first step to find strongly connected components is a <b>depth first search</b>. The depth first search is an algorithm that is used to find vertices in a graph. \
From a random vertex a search will be started to find successor vertices of this specifiv vertex. A successor vertex <i>v</i> is a vertex that is reachable from vertex <i>u</i> through a directed edge. \
If the algorithm passes a vertex the first time this vertex will be marked <i><discovered</i>. If there is no successor vertex or it has already been discovered before the <b>backtracking</b> begins. \
Backtracking is the process of going back to the predeccessor vertex to find other undiscovered paths in the depth first search. If vertex is passed while backtracking it will be marked as <i>finished</i>. \
As soon as a vertex is finished it will be pushed to a stack. This will lead to a stack that consists of all vertices in reverse order of their finishing times. \
This information will be crucial for the last step of the shown algorithm. The depth first search finishes if all vertices have been marked as finished.
<br><br><i>Hint: The states of the vertices in the given graph are highlighted in different colors. Below this description you can see a simple representation of the mentioned stack which will grow with each finished vertex.
algorithm.scc.transposegraph.title = Step 2: Transpose graph
algorithm.scc.transposegraph.content = Now the so called <b>transpose</b> of the given graph must be determined. The transposed graph <i>G<sup>T</sup></i> of a directed graph <i>G</i> is built by taking the <b>same set of vertices</b> of <i>G</i> \
but <b>reversing all edges</b> compared to the orientation of the corresponding edges in <i>G</i>. \
<br><br>Furthermore all vertices will be marked unvisited again. Otherwise the depth first search in step 3 will not work.
algorithm.scc.seconddfs.title = Step 3: Second Depth First Search (DFS)
algorithm.scc.seconddfs.content = Now the knowledge that has been gained in <b>step 1</b> of this algorithm will come in handy. There the vertices have been stored on a stack, sorted from the smallest to the largest finishing times. \
That means the top vertex of the stack is the vertex that has been finished last. Below is the vertex that finished penultimate, etc... \
<br>As in step 1 a depth first search will be started. But now it will not start at a random vertex but in the order of the stack. If the depth first search from a vertex <i>u</i> finds a successor vertex <i>v</i> those two belong to the same strongly connected component. This is in fact the case for all vertices that can be visited in that specific depth first search. If a search has been started from a specific vertex this vertex will be removed from the top of the stack. \
<br>The reason for that is that a strongly connected component of a graph <i>G</i> is also a strongly connected component in its transposed graph <i>G<sup>T</sup></i> \
<br><br>At last we will determine the runtime of the shown algorithm. Therefore the runtimes of the individual components have to be determined first. A depth first search has a runtime of <b>O(V+E)</b> where <i>V</i> stands vor all vertices and <i>E</i> for all edges. Worst case every vertex and every edge has to be visited. The runtime to get the transpose of a graph is also <b>O(V+E)</b>. The shown algorithm consists of two depth first searches and a transpose that can all be computed in linear time which means the complete algorithm can be computed in linear time.

algorithm.noalgorithm.title = No chosen algorithm
algorithm.noalgorithm.content = Please choose an algorithm from drop down menu.


# MessageDialog properties
messages.savetofile.title = Not implemented yet
messages.savetofile.content = Unfortunately it is not possible to save current program state right now. This feature could be added in a future update.

messages.openfromfile.title = Not implemented yet
messages.openfromfile.content = Unfortunately it is not possible to open a previous saved program state right now. This feature could be added in a future update.

messages.starttutorial.title = Tutorial initialized successfully
messages.starttutorial.content = The tutorial has been initialized successfully. Press [Next step] to start.
