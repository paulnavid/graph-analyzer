#
# Internationalization properties --- GERMAN/DEUTSCH
#
# If new key/value pairs get added to this property file they have to be added to all other messages_xxx.properties to.
# Otherwise errors will occur at runtime!
#
# The key format should be understandable and be related to where they belong.
#
# e.g. if a DFS algorithm gets added the key should start with algorithm.dfs.<YOUR-SPECIFIC_KEY>
#
#

general.application.title = Graph Analyzer


# Menubar properties
menu.file               = Datei
menu.file.abort         = Abbrechen
menu.file.new           = Neuer Graph
menu.file.open          = Datei \u00F6ffnen...
menu.file.quit          = Beenden
menu.file.save          = Speichern
menu.file.settings      = Einstellungen
menu.help               = Hilfe
menu.help.about         = \u00DCber Graph Analyzer
menu.help.showTutorial  = Tutorial beim Programmstart anzeigen
menu.settings           = Einstellungen
menu.settings.languages = Sprachen


# Welcome panel properties
welcomePanel.text = <html><body><div align="center"><h1>Willkommen bei Graph Analyzer</h1><br>Mit Graph Analyzer können Sie visuell verfolgen, wie starke Zusammenhangskomponenten in linearer Zeit berechnet werden!<br><br>Um einen Beispielgraphen zu öffnen klicken Sie bitte im Menü auf <b>Datei>Neuer Graph</b>.<br>Alternativ können Sie auch die Tastenkombination [<b>Strg + N</b>] unter Windows, oder [<b>&#8984; + N</b>] unter macOS nutzen.</div></body></html>


# DescriptionPanel properties
descriptionpanel.label.choose = Wähle Algorithmus:
empty = ---


# ControlPanel properties
controls.button.prev = << Schritt zurück
controls.button.next = Schritt vor >>
controls.button.starttutorial = Starte Tutorial
controls.button.tooltip.starttutorial = Startet Tutorialroutine


# Dialog properties
newgraphdialog.title = Wähle einen Graph
newgraphdialog.button.directedgraph = Neuer gerichteter Graph

settingsdialog.title = Einstellungen
settingsdialog.label.chooselanguage = Sprache wählen:
settingsdialog.checkbox.showtutorial = Tutorial beim Programmstart anzeigen
settingsdialog.button.apply = Anwenden und Schließen
settingsdialog.button.close = Schließen

aboutdialog.title = Über Graph Analyzer
aboutdialog.content = <div align="center"><h1>Graph Analyzer</h1><br><br>Version 0.0.1<br><br>Quellcode von Paul Ehler</div>


# Algorithm properties
algorithm.scc.name = Starke Zusammenhangskomponenten
algorithm.scc.introduction.title = Einführung: Starke Zusammenhangskomponenten
algorithm.scc.introduction.content = Dieses Beispiel zeigt Ihnen, wie man <b>starke Zusammenhangskomponenten</b> in einem Graphen <b>in linearer Zeit</b> berechnen kann. \
Bei einer starken Zusammenhangskomponente handelt es sich um einen Teilgraph eines gerichteten Graphen, welcher stark zusammenhängend und nicht zu einem größeren \
stark zusammenhängenden Teilgraphen erweiterbar ist. Ein Teilgraph ist stark zusammenhängend, wenn zwischen zwei beliebigen Knoten <i>u</i> und <i>v</i> ein gerichteter Pfad sowhohl von \
<i>u</i> nach <i>v</i>, als auch von <i>v</i> nach <i>u</i> besteht. Vereinfacht gesagt handelt es sich bei einer starken Zusammenhangskomponente um einen <b>Zyklus</b> innerhalb \
eines Graphen.<br> Der hier vorgestellte Algorithmus geht auf die Mathematiker Sambasiva Rao Kosaraju und Micha Sharir zurück. \
Die drei Hauptbestandteile des Algorithmus sind:\
<br><br><b>1)</b> Eine Tiefensuche um die Finishing-Zeiten der Knoten zu bestimmen\
<br><b>2)</b> Transponieren des Graphen\
<br><b>3)</b> Eine Tiefensuche in umgekehrter Reihenfolge der Finishing-Zeiten aus Schritt 1)\
<br><br>Der Algorithmus macht sich den Umstand zu nutzen, dass eine starke Zusammenhangskomponente eines Graphen <i>G</i>, auch gleichzeitig eine starke Zusammenhangskomponente des transponierten Graphen <i>G<sup>T</sup></i> ist.\
<br><br><i>Hinweis: Wenn Sie das Tutorial starten möchten, klicken Sie bitte auf die Schaltfläche "Starte Tutorial". Danach können Sie mit den VOR und ZURÜCK-Schaltflächen den Algorithmus durchlaufen.</i>

algorithm.scc.firstdfs.title = Schritt 1: Erste Tiefensuche
algorithm.scc.firstdfs.content = Der erste Schritt des Algorithmus zum Auffinden starker Zusammenhangskomponenten ist eine <b>Tiefensuche</b>. Bei einer Tiefensuche handelt es sich um ein Verfahren welches genutzt wird um Knoten in einem Graphen zu suchen. \
Hierbei wird von einem Startknoten aus meist rekursiv in die Tiefe gegangen um nachfolgende Knoten zu besuchen. Passiert der Algorithmus einen Knoten zum ersten mal, wird dieser als <i>besucht(engl. discovered)</i> markiert. Gibt es keinen nachfolgenden Knoten mehr, \
oder wurde dieser bereits besucht, beginnt das sogenannte <b>Backtracking</b>. Dabei wird schrittweise zum Vorgängerknoten zurückgegangen um mögliche andere Pfade zu erschließen. Passiert der Algorithmus beim Backtracking einen Knoten erneut wird diser als <i>beendet(engl. finished)</i> markiert. \
Sobald ein Knoten beendet wurde, wird er auf einen Stack gelegt. Dies führt dazu, dass die Knoten am Ende der Tiefensuche von der kleinsten bis zur größten Finishing-Zeit sortiert auf dem Stack liegen. In Schritt 3 wird dies eine essenzielle Voraussetzung sein. \
<br><br><i>Hinweis: Im Beispielgraph sind die Zustände ob ein Knoten bereits besucht oder beendet wurde zur besseren Übersicht farblich hervorgehoben. Unter dieser Beschreibung finden Sie zudem eine simple Auflistung der sich auf dem Stack befindlichen Knoten, welche mit jedem weiteren beendet Knoten wächst.</i>

algorithm.scc.transposegraph.title = Schritt 2: Inverse des Graphen
algorithm.scc.transposegraph.content = Als nächstes muss die sogenannte <b>Inverse</b> des Graphen ermittelt werden. Der inverse Graph <i>G<sup>T</sup></i> eines gerichteten Graphen <i>G</i> wird gebildet indem man die Knoten von <i>G</i> übernimmt, die Orientierung aller gerichteten Kanten jedoch umgedreht.<br><br>Darüber hinaus werden in diesem Schritt zusätzlich auch alle Knoten wieder als nicht besucht markiert, \
da die im nachfolgenden Schritt durchzuführende Tiefensuche sonst nicht stattfinden könnte.
algorithm.scc.seconddfs.title = Schritt 3: Zweite Tiefensuche
algorithm.scc.seconddfs.content = Bei diesem letzten Schritt wird mit den Erkenntnissen der ersten Tiefensuche aus <b>Schritt 1</b> gearbeitet. Dort wurden die Knoten ihrer Finishing-Zeiten nach von klein nach groß sortiert auf einen Stapel gelegt. \
Das heißt der oberste Knoten des Stapels ist der zuletzt beendete. Darunter liegt derjenige, welcher als vorletztes beendet wurde, etc... Es wird nun eine Tiefensuche durchgeführt, indem man den Stapel von oben nach unten abarbeitet. Findet die Tiefensuche eines Knoten <i>u</i> einen nachfolgenden Knoten <i>v</i>, so gehören diese beiden zu einer starken Zusammenhangskomponente. Dies gilt ebenso für alle weiteren Nachfolgeknoten. \
Der Grund weshalb dies so ist, liegt daran, dass eine starke Zusammenhangskomponente eines Graphen <i>G</i> sowohl in diesem Graphen, als auch zwangsläufig in seiner Inversen <i>G<sup>T</sup></i> vorliegt. \
<br><br>Um nun die Laufzeit des Algorithmus zu bestimmen müssen die Laufzeiten der einzelnen Bestandteile betrachtet werden. Eine Tiefensuche hat eine <b>Laufzeit</b> von <b>O(V+E)</b>, wobei <i>V</i> für die Anzahl der Knoten und <i>E</i> für die Anzahl der Kanten steht. Ebenso verhält es sich für das Transponieren eines Graphen. Da beim gezeigten Algorithmus zwei Tiefensuchen und eine Transposition durchgeführt werden, die alle in linearer Zeit berechnet werden können, ist der gesamte Algorithmus in linearer Zeit berechnbar.
algorithm.noalgorithm.title = Kein Algorithmus ausgewählt
algorithm.noalgorithm.content = Bitte wählen Sie einen Algorithmus im obigen Drop-Down-Menü aus.


# MessageDialog properties
messages.savetofile.title = Funktion noch nicht implementiert
messages.savetofile.content = Es ist leider nicht möglich den aktuellen Zustand zu speichern. Diese Funktion wird eventuell in einer zukünftigen Version hinzugefügt.

messages.openfromfile.title = Funktion noch nicht implementiert
messages.openfromfile.content = Es ist leider nicht möglich einen abgespeicherten Zustand zu öffnen. Diese Funktion wird eventuell in einer zukünftigen Version hinzugefügt.

messages.starttutorial.title = Tutorial erfolgreich initialisiert
messages.starttutorial.content = Das Tutorial wurde erfolgreich initialisiert. Klicke auf [Schritt vor] um zu beginnen.


