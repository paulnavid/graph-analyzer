package graphanalyzer.model.graph;

import java.io.Serializable;

/**
 * This class represents a directed edge.
 * 
 * @author Paul Ehler
 *
 */
public class DirectedEdge implements Serializable {

	/**
	 * Autogenerated unique serial version identifier
	 * 
	 * @see Serializable#serialVersionUID
	 */
	private static final long serialVersionUID = 7992528237652452102L;

	/**
	 * Source Vertex of this edge
	 */
	Vertex source;

	/**
	 * Target vertex of this edge
	 */
	Vertex target;

	/**
	 * Whether the Edge is directed or not, this boolean is here to replace the
	 * specialization DirectedEdge by Edge in the future
	 */
	Boolean isDirected;

	/**
	 * Constructor of DirectedEdge.
	 * 
	 * @param source source Vertex
	 * @param target target Vertex
	 * @param isDirected edge is directed edge if true
	 */
	public DirectedEdge(Vertex source, Vertex target, boolean isDirected) {
		this.source = source;
		this.target = target;
		this.isDirected = isDirected;
	}

	/**
	 * Constructor of DirectedEdge.
	 * 
	 * @param source source Vertex
	 * @param target target Vertex
	 */
	public DirectedEdge(Vertex source, Vertex target) {
		this(source, target, true);
	}

	/**
	 * @return source vertex of this edge
	 */
	public Vertex getSource() {
		return this.source;
	}

	/**
	 * @return target vertex of this edge
	 */
	public Vertex getTarget() {
		return this.target;
	}

	/**
	 * @return whether the edge is directed or not
	 */
	public boolean isDirected() {
		return isDirected;
	}

	@Override
	public String toString() {
		return source.getLabel() + " -> " + target.getLabel();

	}

}
