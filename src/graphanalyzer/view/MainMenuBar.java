package graphanalyzer.view;

import java.awt.event.KeyEvent;
import java.io.Serializable;
import java.util.Locale;
import java.util.ResourceBundle;

import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.KeyStroke;

import graphanalyzer.controller.MainController;
import graphanalyzer.view.dialogs.AboutDialog;
import graphanalyzer.view.dialogs.SettingsDialog;
import graphanalyzer.view.listener.LocaleChangeListener;

/**
 * This class represents the menu bar that is always present in the application
 * <p>
 * It consists of two submenus:
 * <ul>
 * <li>File - shows items New, Open, Save, Settings and Quit</li>
 * <li>Help - shows item About</li>
 * </ul>
 * 
 * 
 * @author Paul Ehler
 *
 */
public class MainMenuBar extends JMenuBar implements LocaleChangeListener {

	/**
	 * Autogenerated unique serial version identifier
	 * 
	 * @see Serializable#serialVersionUID
	 */
	private static final long serialVersionUID = 7368352560887047096L;

	/**
	 * Constant that it used to distinguish between macOS and Windows accelerators
	 */
	private static final String OS_MAC = "Mac";

	/**
	 * An instance of the MainController
	 */
	private MainController controller;

	/**
	 * An instance of the MainGUI
	 */
	private MainGUI gui;

	/**
	 * A submenu that stores all items that belong there.
	 */
	private JMenu menuFile;

	/**
	 * A submenu that stores all items that belong there.
	 */
	private JMenu menuHelp;

	/**
	 * Menu item to create a new graph
	 */
	private JMenuItem itemNew;

	/**
	 * Menu item to open a previously saved routine
	 */
	private JMenuItem itemOpen;

	/**
	 * Menu item to save the current state to a file
	 */
	private JMenuItem itemSave;

	/**
	 * Menu item to show system wide settings, this opens a new
	 * {@link graphanalyzer.view.dialogs.SettingsDialog}
	 */
	private JMenuItem itemSettings;

	/**
	 * Menu item to quit the application
	 */
	private JMenuItem itemQuit;

	/**
	 * Menu item to show the {@link graphanalyzer.view.dialogs.AboutDialog}
	 */
	private JMenuItem itemAbout;

	/**
	 * A ResourceBundle that is used for internationalization
	 */
	private ResourceBundle rb;

	/**
	 * Simple constructor creating the menu bar.
	 * 
	 * @param controller sets connection to the main controller
	 * @param mainGUI
	 */
	public MainMenuBar(MainController controller, MainGUI mainGUI) {
		this.controller = controller;
		this.gui = mainGUI;
		rb = ResourceBundle.getBundle("localization.messages", controller.getSettings().getLocale());

		controller.getSettings().addLocaleChangeListener(this);

		buildMenuFile();
		buildMenuHelp();
		setComponentTexts();
	}

	/**
	 * Builds the file submenu by initializing the needed items and adding them to
	 * {@link #menuFile}.
	 */
	private void buildMenuFile() {
		// Initialize menu items
		itemNew = new JMenuItem();
		itemOpen = new JMenuItem();
		itemSave = new JMenuItem();
		itemSettings = new JMenuItem();
		itemQuit = new JMenuItem();

		// Add ActionListeners to menu items
		itemNew.addActionListener(event -> newGraph());

		itemOpen.addActionListener(event -> open());

		itemSave.addActionListener(event -> save());

		itemSettings.addActionListener(event -> new SettingsDialog(controller, gui));

		itemQuit.addActionListener(event -> System.exit(0)); // Close application

		String osName = System.getProperty("os.name");

		if (osName.startsWith(OS_MAC)) {
			// Set Accelerators for menu items
			itemNew.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, java.awt.event.InputEvent.META_MASK));
			itemOpen.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, java.awt.event.InputEvent.META_MASK));
			itemSave.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, java.awt.event.InputEvent.META_MASK));
			itemQuit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, java.awt.event.InputEvent.META_MASK));
		} else {
			// Set Accelerators for menu items
			itemNew.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
			itemOpen.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
			itemSave.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
			itemQuit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_DOWN_MASK));
		}

		// Add entries to file menu
		menuFile = new JMenu();
		menuFile.add(itemNew);
		menuFile.add(itemOpen);
		menuFile.add(itemSave);
		menuFile.addSeparator();
		menuFile.add(itemSettings);
		menuFile.addSeparator();
		menuFile.add(itemQuit);

		add(menuFile);

	}

	/**
	 * Builds the help submenu by initializing the needed items and adding them to
	 * {@link #menuHelp}.
	 */
	private void buildMenuHelp() {
		// Initialize menu items
		itemAbout = new JMenuItem();

		// Add ActionListeners to menu items
		itemAbout.addActionListener(event -> new AboutDialog(gui));

		// Add entries to file menu
		menuHelp = new JMenu();
		menuHelp.add(itemAbout);

		add(menuHelp);

	}

	/**
	 * Set item texts by getting the corresponding strings by their properties key.
	 */
	private void setComponentTexts() {
		itemNew.setText(rb.getString("menu.file.new"));
		itemSave.setText(rb.getString("menu.file.save"));
		itemOpen.setText(rb.getString("menu.file.open"));
		itemSettings.setText(rb.getString("menu.file.settings"));
		itemQuit.setText(rb.getString("menu.file.quit"));
		menuFile.setText(rb.getString("menu.file"));

		itemAbout.setText(rb.getString("menu.help.about"));
		menuHelp.setText(rb.getString("menu.help"));

	}

	/**
	 * Trigger to inform the controller that the open item has been pressed.
	 */
	private void open() {
		controller.openFromFile();
	}

	/**
	 * Trigger to inform the controller that the save item has been pressed.
	 */
	private void save() {
		controller.saveToFile();
	}

	/**
	 * Trigger to inform the controller that the new item has been pressed.
	 */
	private void newGraph() {
		controller.requestNewGraph();
	}

	@Override
	public void onLocaleChange(Locale newLocale) {
		rb = ResourceBundle.getBundle("localization.messages", newLocale);

		setComponentTexts();
	}

}
