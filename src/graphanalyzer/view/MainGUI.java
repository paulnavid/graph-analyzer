package graphanalyzer.view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.DisplayMode;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Ellipse2D;
import java.awt.image.ImageObserver;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.Serializable;
import java.text.AttributedCharacterIterator;
import java.util.Locale;
import java.util.ResourceBundle;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;

import graphanalyzer.controller.MainController;
import graphanalyzer.model.graph.DirectedGraph;
import graphanalyzer.model.graph.Graph;
import graphanalyzer.model.graph.Vertex;
import graphanalyzer.view.listener.LocaleChangeListener;
import graphanalyzer.view.panels.DescriptionPanel;
import graphanalyzer.view.panels.GraphPanel;
import graphanalyzer.view.panels.WelcomePanel;

/**
 * Main GUI that shows Window with containered panels.
 * <p>
 * Folowing panels are all getting initialzed by this class:
 * <ul>
 * <li>{@link graphanalyzer.view.panels.GraphPanel}</li>
 * <li>{@link graphanalyzer.view.panels.WelcomePanel}</li>
 * <li>{@link graphanalyzer.view.panels.DescriptionPanel}</li>
 * </ul>
 * 
 * @author Paul Ehler
 *
 */
public class MainGUI extends JFrame implements LocaleChangeListener, Serializable {

	/**
	 * Autogenerated unique serial version identifier
	 * 
	 * @see Serializable#serialVersionUID
	 */
	private static final long serialVersionUID = 1505770862585602370L;

	private static String FRAME_TITLE = "Graph Analyzer";

	/**
	 * An instance of the MainController
	 */
	private final MainController controller;

	/**
	 * A panel to combine all initialized panels in this class, this is used for
	 * layouting reasons
	 */
	private JPanel containerPanel;

	/**
	 * A panel that combines the GraphPanel and the DescriptionPanel
	 */
	private JPanel mainPanel;

	/**
	 * A welcome panel that will be shown at program start
	 */
	private WelcomePanel welcomePanel;

	/**
	 * An instance of {@link graphanalyzer.view.panels.GraphPanel}
	 */
	private GraphPanel graphPanel;

	/**
	 * An instance of {@link graphanalyzer.view.panels.DescriptionPanel}
	 */
	private DescriptionPanel descriptionPanel;

	/**
	 * An instance of {@link graphanalyzer.view.MainMenuBar}
	 */
	private MainMenuBar mainMenuBar;

	/**
	 * A ResourceBundle that is used for internationalization of all drawn dialogs
	 */
	private ResourceBundle rb;

	private int windowHeight;
	private int windowWidth;

	/**
	 * Constructor of the MainGUI.
	 * 
	 * @param controller
	 */
	public MainGUI(MainController controller) {
		super(FRAME_TITLE);
		this.controller = controller;

		rb = ResourceBundle.getBundle("localization.messages", controller.getSettings().getLocale());

		GraphicsEnvironment environment = GraphicsEnvironment.getLocalGraphicsEnvironment();
		DisplayMode displayMode = environment.getDefaultScreenDevice().getDisplayMode();

		// Initial window size
		windowWidth = (displayMode.getWidth() * 2 / 3);
		windowHeight = (displayMode.getHeight() * 2 / 3);

		mainMenuBar = new MainMenuBar(controller, this);

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setSize(windowWidth, windowHeight);
		setMinimumSize(new Dimension(windowWidth, windowHeight));

		setJMenuBar(mainMenuBar);

		// Display the window in the center of the screen
		setLocation((displayMode.getWidth() - windowWidth) / 2, (displayMode.getHeight() - windowHeight) / 2);

		setVisible(true);
	}

	/**
	 * Initialize all contained components.
	 */
	public void drawGUI() {

		// Remove welcome panel if graph has been requested
		remove(welcomePanel);

		containerPanel = new JPanel(new BorderLayout());
		mainPanel = new JPanel(new GridLayout());
		descriptionPanel = new DescriptionPanel(controller, this);
		graphPanel = new GraphPanel(controller.getGraph(), this);

		// Add listener for local change
		controller.getSettings().addLocaleChangeListener(descriptionPanel);

		mainPanel.add(graphPanel);
		mainPanel.add(descriptionPanel);

		containerPanel.add(mainPanel, BorderLayout.CENTER);

		add(containerPanel);

		this.addComponentListener(new ComponentListener() {

			@Override
			public void componentShown(ComponentEvent e) {
				// unused

			}

			@Override
			public void componentResized(ComponentEvent e) {
				windowHeight = (int) getSize().getHeight();
				windowWidth = (int) getSize().getWidth();
				graphPanel.revalidate();
				repaint();

			}

			@Override
			public void componentMoved(ComponentEvent e) {
				// unused

			}

			@Override
			public void componentHidden(ComponentEvent e) {
				// unused

			}
		});

	}

	/**
	 * Draw a welcomePanel.
	 */
	public void showWelcomePanel() {
		if (controller.getSettings().showTutorial()) {
			welcomePanel = new WelcomePanel(controller, this);
			controller.getSettings().addLocaleChangeListener(welcomePanel);
			add(welcomePanel);
			revalidate();
		}

	}

	/**
	 * Show the description that no algorithm has been chosen yet.
	 */
	public void showNoAlgorithm() {
		this.updateDescriptionPanel("algorithm.noalgorithm.title", "algorithm.noalgorithm.content");
	}

	/**
	 * Update the main panel of DescriptionPanel with the given keys for title and
	 * content panel.
	 * 
	 * @param titleKey   resource bundle key for the new title
	 * @param contentKey resource bundle key for the new content
	 */
	public void updateDescriptionPanel(String titleKey, String contentKey) {
		descriptionPanel.updateDescriptionPanel(titleKey, contentKey);
	}

	/**
	 * Update the secondaryPanel of the DescriptionPanel with the given string.
	 * 
	 * @param newContent the new text that should be printed
	 */
	public void updateSecondaryPanel(String newContent) {
		descriptionPanel.updateSecondaryPanel(newContent);

	}

	/**
	 * @return the instance of the graphPanel
	 */
	public GraphPanel getGraphPanel() {
		return graphPanel;
	}

	/**
	 * @return the instance of the current object
	 */
	public JFrame getFrame() {
		return this;
	}

	/**
	 * @return the MainGUIs resource bundle
	 */
	public ResourceBundle getResourceBundle() {
		return rb;
	}

	@Override
	public void onLocaleChange(Locale newLocale) {
		rb = ResourceBundle.getBundle("localization.messages", newLocale);
	}

}
