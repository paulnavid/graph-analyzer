package graphanalyzer.view.panels;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Insets;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Locale;
import java.util.ResourceBundle;

import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JEditorPane;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.text.DefaultCaret;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import javax.swing.text.html.HTMLEditorKit;

import graphanalyzer.controller.MainController;
import graphanalyzer.model.graph.DirectedGraph;
import graphanalyzer.view.MainGUI;
import graphanalyzer.view.listener.LocaleChangeListener;

/**
 * A class the displays information of the current algorithm state.
 * <p>
 * 
 * @author paulehler
 *
 */
public class DescriptionPanel extends JPanel implements LocaleChangeListener {

	/**
	 * Autogenerated unique serial version identifier
	 * @see Serializable#serialVersionUID
	 */
	private static final long serialVersionUID = 8198671991118029079L;
	
	/**
	 * Default background color
	 */
	private final Color BACKGROUND_COLOR_COMBO = new Color(0x595959);
	
	/**
	 * Default margin that is used for all JTextPane
	 */
	private static final int DEFAULT_MARGIN = 10;
	
	/**
	 * ResourceBundle key for an empty Combobox item
	 */
	private static final String COMBO_ITEM_EMPTY = "empty";
	
	/**
	 * ResourceBundle key for the scc algorithm item
	 */
	private static final String COMBO_ITEM_SCC = "algorithm.scc.name";

	/**
	 * Instance of the MainController
	 */
	private MainController controller;

	/**
	 * Title of the content panel
	 */
	private JTextPane title;
	
	/**
	 * Content of the content panel
	 */
	private JTextPane content;
	
	/**
	 * Panel to show secondary information
	 */
	private JTextPane secondaryPanel;

	/**
	 * A key for the String stored in the Properties file for the content
	 */
	private String rbKeyForContent;
	
	/**
	 * A key for the String stored in the Properties file for the title
	 */
	private String rbKeyForTitle;

	private JLabel chooseAlgorithmLabel;

	/**
	 * Combobox that stores all provided algorithms
	 */
	private JComboBox<String> algorithmCombo;
	
	/**
	 * ComboBoxModel used to fill the combobox dynamically after langauge change
	 */
	private DefaultComboBoxModel<String> model;
	
	private HashMap<String, String> mapAlgorithNameToKey = new HashMap<>();
	
	private int selectedItemIndex;

	/**
	 * A ResourceBundle that is used for internationalization of all drawn dialogs
	 */
	private ResourceBundle rb;

	/**
	 * Constructor for a DescriptionPanel.
	 * <p>
	 * 
	 * @param controller main controller
	 * @param gui the parent gui
	 */
	public DescriptionPanel(MainController controller, MainGUI gui) {
		super.setLayout(new BorderLayout());

		this.controller = controller;
		rb = gui.getResourceBundle();

		// Set font properties
		Font currentFont = this.getFont();
		Font newFont = currentFont.deriveFont(currentFont.getSize() * 1.2F);

		// Initialize components for choosing algorithm
		chooseAlgorithmLabel = new JLabel(rb.getString("descriptionpanel.label.choose"));
		chooseAlgorithmLabel.setForeground(Color.WHITE);

		fillComboBoxModel();
		algorithmCombo = new JComboBox<>(model);
		selectedItemIndex = 0;

		// Initialize title pane to display the title of the current step
		title = new JTextPane();
		title.setFont(newFont);
		title.setMargin(new Insets(DEFAULT_MARGIN, DEFAULT_MARGIN, DEFAULT_MARGIN, DEFAULT_MARGIN));
		title.setOpaque(false);
		title.setEditable(false);
		title.setFocusable(false);

		// Initialize content panel to display explanation of the current step
		content = new JTextPane();
		content.setEditorKit(new HTMLEditorKit()); // Set content type to HTML
		content.putClientProperty(JEditorPane.HONOR_DISPLAY_PROPERTIES, Boolean.TRUE); // Use EditorPane styling over
																						// HTML styling. Spares
																						// avoidable String expressions
																						// mimicking CSS
		content.setFont(newFont);
		content.setMargin(new Insets(DEFAULT_MARGIN, DEFAULT_MARGIN, DEFAULT_MARGIN, DEFAULT_MARGIN));
		content.setOpaque(false);
		content.setEditable(false);
		content.setFocusable(false);

		// Initialize ScrollPane so a vertical scrollbar appears if window is to small
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
		//scrollPane.setBorder(BorderFactory.createEmptyBorder()); // Disable HTML Viewport border
		scrollPane.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Color.BLACK));

		// Setting caret to never update to scroll to top on component paint
		DefaultCaret caret = (DefaultCaret) content.getCaret();
		caret.setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
		
		// Initialize SecondaryPanel
		secondaryPanel = new JTextPane();
		secondaryPanel.setFont(newFont);
		secondaryPanel.setMargin(new Insets(DEFAULT_MARGIN, DEFAULT_MARGIN, DEFAULT_MARGIN, DEFAULT_MARGIN));
		secondaryPanel.setOpaque(true);
		secondaryPanel.setEditable(false);
		secondaryPanel.setFocusable(false);
		
		// Center text horizontally
		StyledDocument doc = secondaryPanel.getStyledDocument();
		SimpleAttributeSet center = new SimpleAttributeSet();
		StyleConstants.setAlignment(center, StyleConstants.ALIGN_CENTER);
		doc.setParagraphAttributes(0, doc.getLength(), center, false);

		// Initialize ControlPanel
		ControlPanel controlPanel = new ControlPanel(controller, gui);
		
		controller.getSettings().addLocaleChangeListener(controlPanel);

		// Add ActionListener to components
		algorithmCombo.addActionListener(event -> {
			selectedItemIndex = algorithmCombo.getSelectedIndex();
			controller.changeAlgorithm(mapAlgorithNameToKey.get(algorithmCombo.getSelectedItem()));
		});
		
		// this.setBorder(BorderFactory.createMatteBorder(0, 1, 0, 0, DEFAULT_PANEL_BACKGROUND)); // Set border on the left
		
		// Add components to container panels
		JPanel choosePanel = new JPanel(new FlowLayout());
		choosePanel.add(chooseAlgorithmLabel);
		choosePanel.add(algorithmCombo);
		choosePanel.setBackground(BACKGROUND_COLOR_COMBO);
		
		JPanel textPanel = new JPanel(new BorderLayout());
		textPanel.add(title, BorderLayout.NORTH);
		textPanel.add(scrollPane, BorderLayout.CENTER);
		scrollPane.setViewportView(content);
		
		JPanel mainPanel = new JPanel(new GridLayout(2, 1));
		mainPanel.add(textPanel);
		mainPanel.add(secondaryPanel);

		// Add container panels to description panel
		add(choosePanel, BorderLayout.NORTH);
		add(mainPanel, BorderLayout.CENTER);
		add(controlPanel, BorderLayout.SOUTH);

	}

	/**
	 * This method is used to update the content of the DescriptionPanel by the controller.
	 * 
	 * @param newTitle a new title for the content panel
	 * @param newContent a new text for the content panel
	 */
	public void updateDescriptionPanel(String newTitle, String newContent) {
		rbKeyForTitle = newTitle;
		title.setFont(title.getFont().deriveFont(Font.BOLD));
		title.setText(rb.getString(rbKeyForTitle));
		rbKeyForContent = newContent;
		content.setText(rb.getString(rbKeyForContent));
	}
	
	/**
	 * This method is used to update the content of the {@link #secondaryPanel} by the controller.
	 * 
	 * @param newText a new text to be shown
	 */
	public void updateSecondaryPanel(String newText) {
		secondaryPanel.setText(newText);
		
	}

	/**
	 * This method is used to fill the {@link #model} with the provided algorithms.
	 */
	private void fillComboBoxModel() {
		mapAlgorithNameToKey.clear();
		mapAlgorithNameToKey.put(rb.getString(COMBO_ITEM_EMPTY), COMBO_ITEM_EMPTY);
		mapAlgorithNameToKey.put(rb.getString(COMBO_ITEM_SCC), COMBO_ITEM_SCC);
		if (controller.getGraph() instanceof DirectedGraph) {
			model = new DefaultComboBoxModel<>(new String[] { rb.getString(COMBO_ITEM_EMPTY), rb.getString(COMBO_ITEM_SCC) });
		} else {
			// If no suitable algorithm is implemented ComboBox should show ---
			model = new DefaultComboBoxModel<>(new String[] { rb.getString(COMBO_ITEM_EMPTY) });
		}
	}

	@Override
	public void onLocaleChange(Locale newLocale) {
		rb = ResourceBundle.getBundle("localization.messages", newLocale);

		fillComboBoxModel();
		algorithmCombo.setModel(model);
		algorithmCombo.setSelectedIndex(selectedItemIndex);

		if (content != null && rbKeyForContent != null) {
			content.setText(rb.getString(rbKeyForContent));
		}

		if (title != null && rbKeyForTitle != null) {
			title.setText(rb.getString(rbKeyForTitle));
		}

		chooseAlgorithmLabel.setText(rb.getString("descriptionpanel.label.choose"));
	}

}
