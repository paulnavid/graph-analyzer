package graphanalyzer.view.panels;

import java.awt.Color;
import java.awt.Font;
import java.awt.GridBagLayout;
import java.io.Serializable;
import java.util.Locale;
import java.util.ResourceBundle;

import javax.swing.JEditorPane;
import javax.swing.JPanel;
import javax.swing.JTextPane;
import javax.swing.text.html.HTMLEditorKit;

import graphanalyzer.controller.MainController;
import graphanalyzer.view.MainGUI;
import graphanalyzer.view.listener.LocaleChangeListener;

/**
 * This class represents a simple welcome screen that will be shown on program start.
 * 
 * @author paulehler
 *
 */
public class WelcomePanel extends JPanel implements LocaleChangeListener {
	
	/**
	 * Autogenerated unique serial version identifier
	 * 
	 * @see Serializable#serialVersionUID
	 */
	private static final long serialVersionUID = -454121912452607133L;
	
	/**
	 * An instance of MainController
	 */
	private MainController controller;
	
	/**
	 * An instance of MainGUI
	 */
	private MainGUI gui;
	
	/**
	 * A ResourceBundle that is used for internationalization of all drawn dialogs
	 */
	private ResourceBundle rb;
	
	/**
	 * The text that will be displayed in this dialog
	 */
	private JTextPane text;
	
	/**
	 * Constructor of WelcomePanel.
	 * 
	 * @param controller main controller
	 * @param gui parent gui
	 */
	public WelcomePanel(MainController controller, MainGUI gui) {
		super.setLayout(new GridBagLayout());
		this.setBackground(new Color(0xBFBFBF));
		this.controller = controller;
		this.gui = gui;
		
		rb = gui.getResourceBundle();
		
		// Set font properties
		Font currentFont = this.getFont();
		Font newFont = currentFont.deriveFont(currentFont.getSize() * 1.4F);
		
		text = new JTextPane();
		text.setEditorKit(new HTMLEditorKit()); // Set content type to HTML
		text.setAlignmentY(CENTER_ALIGNMENT);
		text.setFont(newFont);
		text.setText(rb.getString("welcomePanel.text"));
		text.setEditable(false);
		text.setFocusable(false);
		text.setOpaque(false);
		text.putClientProperty(JEditorPane.HONOR_DISPLAY_PROPERTIES, Boolean.TRUE); // Use EditorPane styling over
		// HTML styling. Spares
		// avoidable String expressions
		// mimicking CSS
		setVisible(true);
		add(text);
		
	}

	@Override
	public void onLocaleChange(Locale currentLocale) {
		rb = ResourceBundle.getBundle("localization.messages", currentLocale);
		text.setText(rb.getString("welcomePanel.text"));
		
	}

}
