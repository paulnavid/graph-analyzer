package graphanalyzer.view.panels;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.io.Serializable;
import java.util.Locale;
import java.util.ResourceBundle;

import javax.swing.JButton;
import javax.swing.JPanel;

import graphanalyzer.controller.MainController;
import graphanalyzer.view.MainGUI;
import graphanalyzer.view.listener.LocaleChangeListener;

/**
 * This panel is used to display the buttons to control the application.
 * <p>
 * The ControlPanel consists of three buttons. One to start a chosen algorithm
 * and one to step forwards and one to step backwards in this algorithm.
 * 
 * @author paulehler
 *
 */
public class ControlPanel extends JPanel implements LocaleChangeListener {

	/**
	 * Autogenerated unique serial version identifier
	 * 
	 * @see Serializable#serialVersionUID
	 */
	private static final long serialVersionUID = 6890604888225316302L;

	/**
	 * A button that is used to step backwards in the
	 * {@link graphanalyzer.controller.routines.AlgorithmRoutine} when pressed
	 */
	private JButton prevButton;

	/**
	 * A button that is used to start a chosen algorithm by initializing an
	 * {@link graphanalyzer.controller.routines.AlgorithmRoutine} when pressed
	 */
	private JButton startButton;

	/**
	 * A button that is used to step forwards in the
	 * {@link graphanalyzer.controller.routines.AlgorithmRoutine} when pressed
	 */
	private JButton nextButton;

	/**
	 * A ResourceBundle that is used for internationalization of all drawn dialogs.
	 */
	private ResourceBundle rb;

	/**
	 * Constructor for a ControlPanel.
	 * 
	 * @param controller
	 * @param gui
	 */
	public ControlPanel(MainController controller, MainGUI gui) {
		super.setLayout(new GridLayout(1, 3));
		super.setPreferredSize(new Dimension(50, 50)); // make button height 50px

		rb = gui.getResourceBundle();

		// Initialize buttons
		prevButton = new JButton();
		startButton = new JButton();
		nextButton = new JButton();
		prevButton.setOpaque(true);
		startButton.setOpaque(true);
		nextButton.setOpaque(true);

		// Add ActionListener to components
		prevButton.addActionListener(event -> controller.requestPreviousStep());
		startButton.addActionListener(event -> controller.requestAlgorithm());
		nextButton.addActionListener(event -> controller.requestNextStep());

		setComponentTexts();

		add(prevButton);
		add(startButton);
		add(nextButton);

	}

	/**
	 * Sets the button texts by key from ResourceBundle.
	 * <p>
	 * This has been extracted as method so there is no redundant code on locale change.
	 */
	private void setComponentTexts() {
		prevButton.setText(rb.getString("controls.button.prev"));
		startButton.setText(rb.getString("controls.button.starttutorial"));
		nextButton.setText(rb.getString("controls.button.next"));
	}

	@Override
	public void onLocaleChange(Locale newLocale) {
		rb = ResourceBundle.getBundle("localization.messages", newLocale);

		setComponentTexts();
	}

}
