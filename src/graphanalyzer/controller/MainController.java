package graphanalyzer.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.Serializable;
import java.util.ResourceBundle;

import graphanalyzer.controller.routines.AlgorithmRoutine;
import graphanalyzer.controller.routines.StronglyConnectedComponentsRoutine;
import graphanalyzer.controller.settings.Settings;
import graphanalyzer.model.graph.DirectedGraph;
import graphanalyzer.model.graph.Graph;
import graphanalyzer.util.io.GraphMLReader;
import graphanalyzer.view.MainGUI;
import graphanalyzer.view.dialogs.MessageDialog;
import graphanalyzer.view.dialogs.NewGraphDialog;

/**
 * Controller class of the application.
 * <p>
 * The model and the view get initialized in this class. Interactions with the
 * view lead to a notification of the controller.
 * 
 * @author paulehler
 *
 */
public class MainController implements Serializable {

	/**
	 * Autogenerated unique serial version identifier
	 * 
	 * @see Serializable#serialVersionUID
	 */
	private static final long serialVersionUID = 9022065537161637027L;

	/**
	 * A graph to be used for a given algorithm
	 */
	private DirectedGraph graph;

	/**
	 * The main user interface, all panels will get drawn on this frame
	 */
	private MainGUI mainGUI;

	/**
	 * An instance of the {@link #Settings} class
	 */
	private Settings settings;

	/**
	 * An instance of a routine that will compute the selected algorithm
	 */
	private AlgorithmRoutine algRoutine;

	/**
	 * The chosen algorithm by the user
	 */
	private String chosenAlgorithm = null;

	/**
	 * A ResourceBundle that is used for internationalization of all drawn dialogs
	 */
	private ResourceBundle rb;

	/**
	 * Constructor for a {@link #MainController()} that is used to control the
	 * complete application.
	 */
	public MainController() {
		settings = new Settings();
		mainGUI = new MainGUI(this);
		settings.addLocaleChangeListener(mainGUI);
		mainGUI.showWelcomePanel();

	}

	/**
	 * Method used to repaint the GUI after a chnage has happened.
	 */
	private void updateView() {
		this.mainGUI.setVisible(true);
		this.mainGUI.revalidate();
		this.mainGUI.repaint();
	}

	/**
	 * This method is invoked when a new graph is requested by
	 * {@link graphanalyzer.view.MainMenuBar#itemNew} and opens a dialog to choose a
	 * new graph.
	 */
	public void requestNewGraph() {
		new NewGraphDialog(this, mainGUI);
	}

	/**
	 * This method is invoked when a new graph is requested by
	 * {@link graphanalyzer.view.panels.ControlPanel#startButton} and initializes
	 * {@link #algRoutine} with the chosen algorithm.
	 */
	public void requestAlgorithm() {
		if (chosenAlgorithm == null || chosenAlgorithm.equals("empty")) {
			return;
		}

		if (algRoutine != null) {
			return;
		}

		algRoutine = new StronglyConnectedComponentsRoutine(graph, mainGUI);
		MessageDialog.showMessage("Das Tutorial wurde erfolgreich initialisiert, klicke auf Schritt vor um zu beginnen",
				"Tutorial erfolgreich initialisiert");
		updateView();

	}

	/**
	 * This method is invoked when a new graph is requested by
	 * {@link graphanalyzer.view.panels.ControlPanel#nextButton} and will invoke the
	 * nextStep() method of {@link #algRoutine}.
	 */
	public void requestNextStep() {
		if (algRoutine == null) {
			return;
		}
		algRoutine.nextStep();
		updateView();

	}

	/**
	 * This method is invoked when a new graph is requested by
	 * {@link graphanalyzer.view.panels.ControlPanel#previousButton} and will invoke
	 * the previousStep() method of {@link #algRoutine}.
	 */
	public void requestPreviousStep() {
		if (algRoutine == null) {
			return;
		}
		algRoutine.previousStep();
		updateView();
	}

	/**
	 * This method is invoked when a new graph has been chosen in the dialog created
	 * by {@link graphanalyzer.view.MainMenuBar#itemNew} and reads the GraphML file
	 * to draw the graph.
	 */
	public void requestNewDirectedGraph() {
		if (graph == null) {
			try {
				graph = new DirectedGraph();
				GraphMLReader reader = new GraphMLReader(graph);
				InputStream inStream;
				File graphMlFile = new File("resources/graphs/DirectedGraphExample.graphml");
				if (graphMlFile.exists()) {
					inStream = new FileInputStream(graphMlFile);
					reader.readInput(inStream);
				} else {
					String fileNameStream = "graphs/DirectedGraphExample.graphml";
					inStream = getClass().getClassLoader().getResourceAsStream(fileNameStream);

					if (inStream == null) {
						MessageDialog.showError(("file is not found!"), "lul");
					} else {
						reader.readInput(inStream);
					}
				}
				mainGUI.drawGUI();
				mainGUI.showNoAlgorithm();
				updateView();
			} catch (Exception e) {
				graph = null;
				e.printStackTrace();
			}
		} else {
			MessageDialog.showMessage(
					"It is not possible to request a new Directed Graph if one is already open. Please restart the Application for a new Graph.",
					"TODO");
		}

	}

	/**
	 * @return instance of settings class
	 */
	public Settings getSettings() {
		return settings;
	}

	/**
	 * @return instance of the graph
	 */
	public Graph getGraph() {
		return graph;
	}

	/**
	 * This method is invoked when a new algorithm has been chosen in
	 * {@link graphanalyzer.view.panels.DescriptionPanel#algorithmCombo} and updates
	 * the DescriptionPanel to show the right introduction.
	 * 
	 * @param algorithm string representation of the algorithm to display
	 */
	public void changeAlgorithm(String algorithm) {
		chosenAlgorithm = algorithm;
		if (algRoutine == null) {
			switch (chosenAlgorithm) {
			case "algorithm.scc.name":
				mainGUI.updateDescriptionPanel("algorithm.scc.introduction.title",
						"algorithm.scc.introduction.content");
				break;
			default:
				mainGUI.updateDescriptionPanel("algorithm.noalgorithm.title", "algorithm.noalgorithm.content");
				break;
			}
		}

	}

	/**
	 * TODO : Implement in future release.
	 */
	public void saveToFile() {
		ResourceBundle rb = ResourceBundle.getBundle("localization.messages", getSettings().getLocale());
		MessageDialog.showWarning(rb.getString("messages.savetofile.content"),
				rb.getString("messages.savetofile.title"));
		/*
		 * try { FileOutputStream fileOut = new FileOutputStream("resources/test.ser");
		 * ObjectOutputStream out = new ObjectOutputStream(fileOut);
		 * out.writeObject(algRoutine); out.close(); fileOut.close();
		 * System.out.printf("Serialized data is saved in resources/test.ser"); } catch
		 * (IOException i) { i.printStackTrace(); }
		 */
	}

	/**
	 * TODO : Implement in future release.
	 */
	public void openFromFile() {
		ResourceBundle rb = ResourceBundle.getBundle("localization.messages", getSettings().getLocale());
		MessageDialog.showWarning(rb.getString("messages.openfromfile.content"),
				rb.getString("messages.openfromfile.title"));
		/*
		 * try { FileInputStream fileIn = new FileInputStream("resources/test.ser");
		 * ObjectInputStream in = new ObjectInputStream(fileIn); algRoutine =
		 * (StronglyConnectedComponentsRoutine) in.readObject(); in.close();
		 * fileIn.close(); } catch (IOException i) { i.printStackTrace(); return; }
		 * catch (ClassNotFoundException c) {
		 * System.out.println("Employee class not found"); c.printStackTrace(); return;
		 * }
		 */

	}

}
