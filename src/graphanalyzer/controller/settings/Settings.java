package graphanalyzer.controller.settings;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.stream.Collectors;

import graphanalyzer.view.listener.LocaleChangeListener;
import graphanalyzer.view.listener.SettingsChangeListener;

/**
 * Settings for management of application wide settings.
 * <p>
 * This class is used to store system wide settings like the chosen locale.
 * 
 * 
 * @author Paul Ehler
 *
 */
public class Settings implements Serializable {
	
	/**
	 * Autogenerated unique serial version identifier
	 * @see Serializable
	 */
	private static final long serialVersionUID = -4516315299510669552L;
	
	/**
	 * The currently set Locale
	 */
	private Locale currentLocale;
	
	/**
	 * Whether to show the tutorial on startup or not
	 */
	private Boolean showTutorial;
	
	/**
	 * A list of all supported languages
	 */
	private ArrayList<Locale> languages;
	
	/**
	 * A list of all Observers of this class
	 */
	private List<LocaleChangeListener> listener = new ArrayList<>();
	
	/**
	 * A list of all Observers of this class
	 */
	private List<SettingsChangeListener> settingsListener = new ArrayList<>();
	
	/**
	 * Constructor for Settings object. Initializes all settings.
	 */
	public Settings() {
		
		showTutorial = true;
		
		languages = new ArrayList<>();
		languages.addAll(Arrays.asList(Locale.GERMANY, Locale.ENGLISH));
		if (languages.contains(Locale.getDefault())) {
			this.currentLocale = Locale.getDefault();
		} else {
			this.currentLocale = Locale.ENGLISH;
		}
		
	}

	
	/**
	 * Return the current selected application wide Locale.
	 * 
	 * @return  current selected Locale
	 */
	public Locale getLocale() {
		return currentLocale;
	}
	
	/**
	 * Return the display name of {@link #currentLocale} localized according to the value of {@link #currentLocale} itself.
	 * <p>
	 * e.g.: If currentLocale is <tt>de</tt> it will be returned as <tt>Deutsch</tt>
	 * 
	 * @return  localized display name of {@link #currentLocale}
	 */
	public String getDisplayNameOfLocale() {
		return currentLocale.getDisplayLanguage(currentLocale);
	}
	
	/**
	 * Return all provided Locales that are supported application wide.
	 * 
	 * @return  a list of all provided languages
	 */
	public List<Locale> getProvidedLocales() {
		return languages;
	}
	
	/**
	 * Return list of display names of {@link #languages} localized according to the value of {@link #currentLocale}.
	 * <p>
	 * e.g.: If {@link #languages} is [de, en] and {@link #currentLocale} is <tt>en</tt> it will bw returned as ["German", "English"]
	 * 
	 * @return  a list of localized display names of {@link #languages}
	 */
	public List<String> getDisplayNamesOfProvidedLocales() {
		List<String> names = new ArrayList<>();
		names.addAll(getProvidedLocales().stream().map(locale -> locale.getDisplayLanguage(currentLocale)).collect(Collectors.toList()));
		return names;
	}
	
	/**
	 * 
	 * @return true if tutorial should be shown, else false
	 */
	public Boolean showTutorial() {
		return showTutorial;
	}
	
	/**
	 * Sets the boolean {@link #showTutorial}
	 * 
	 * @param selection
	 */
	public void setShowTutorial(Boolean selection) {
		showTutorial = selection;
		notifyListener();
	}
	
	/**
	 * Sets the {@link #currentLocale}.
	 * 
	 * @param locale a new locale
	 */
	public void setLanguage(Locale locale) {
		currentLocale = locale;
		notifyListener();
	}

	/**
	 * Notifies all listeners of this class that the state of the object has changed.
	 */
	private void notifyListener() {
		for (LocaleChangeListener listeners : listener) {
			listeners.onLocaleChange(currentLocale);
		}

		for (SettingsChangeListener listeners : settingsListener) {
			listeners.onSettingsChange(this);
		}
		
	}
	
	/**
	 * Add listener to be able to notify observers when {@link #currentLocale} changes.
	 * 
	 * @param newListener
	 */
	public void addLocaleChangeListener(LocaleChangeListener newListener) {
		listener.add(newListener);
	}
	
	/**
	 * Add listener to be able to notify observers when {@link #Settings} changes.
	 * 
	 * @param newListener
	 */
	public void addSettingsChangeListener(SettingsChangeListener newListener) {
		settingsListener.add(newListener);
	}


}
